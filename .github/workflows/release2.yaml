# .github/workflows/release.yaml

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  releases-matrix:
    name: Release Go Binary
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # build and publish in parallel: linux/386, linux/amd64, linux/arm64, windows/386, windows/amd64, darwin/amd64, darwin/arm64
        goos: [linux, windows]
        goarch: [amd64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y golang gcc libgl1-mesa-dev xorg-dev libxkbcommon-dev
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            sudo apt-get install -y gcc-mingw-w64
          fi
      - name: Prepare Go Environment
        run: |
          go get fyne.io/fyne/v2@latest
          go install fyne.io/fyne/v2/cmd/fyne@latest
          go mod tidy
      - name: Set Output Binary Name
        id: vars
        run: |
          echo "BINARY_NAME=maxine-vc-${{ matrix.goos }}-${{ matrix.goarch }}" >> $GITHUB_ENV
          echo "binary_name=maxine-vc-${{ matrix.goos }}-${{ matrix.goarch }}" >> $GITHUB_OUTPUT
      - name: Build Go Binary
        run: |
          export GOOS=${{ matrix.goos }}
          export GOARCH=${{ matrix.goarch }}
          if [[ "$GOOS" == "windows" ]]; then
            export CGO_ENABLED=1
            export CC=x86_64-w64-mingw32-gcc
          else
            export CGO_ENABLED=1
          fi
          go build -o $BINARY_NAME .
      - name: Create GitHub Release
        if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.vars.outputs.binary_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
