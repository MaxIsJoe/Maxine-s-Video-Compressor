on:
  push:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - name: Generate Tag
        id: set-tag
        run: echo "tag=v${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.set-tag.outputs.tag }}
          name: Release ${{ steps.set-tag.outputs.tag }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-upload:
    name: Build and Upload Binaries
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y golang gcc libgl1-mesa-dev xorg-dev libxkbcommon-dev
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            sudo apt-get install -y gcc-mingw-w64
          fi

      - name: Prepare Go
        run: |
          go install fyne.io/fyne/v2/cmd/fyne@latest
          go mod tidy

      - name: Set Binary Name
        id: vars
        run: |
          NAME=maxine-vc-${{ matrix.goos }}-${{ matrix.goarch }}
          if [ "${{ matrix.goos }}" = "windows" ]; then
            NAME="$NAME.exe"
          fi
          echo "BINARY_NAME=$NAME" >> $GITHUB_ENV
          echo "binary_name=$NAME" >> $GITHUB_OUTPUT

      - name: Build Binary
        run: |
          export GOOS=${{ matrix.goos }}
          export GOARCH=${{ matrix.goarch }}
          if [[ "$GOOS" == "windows" ]]; then
            export CGO_ENABLED=1
            export CC=x86_64-w64-mingw32-gcc
          else
            export CGO_ENABLED=1
          fi
          go build -o $BINARY_NAME .

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.tag }}
          files: ${{ steps.vars.outputs.binary_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate-changelog:
    name: Generate Changelog
    needs: build-and-upload
    runs-on: ubuntu-latest
    steps:
      - name: Generate and Update Release Notes
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: ".github/changelog-configuration.json"
          tag: ${{ needs.create-release.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
